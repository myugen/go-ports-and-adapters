// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/myugen/go-ports-and-adapters/pkg/videos/domain/video (interfaces: Repository)

// Package mockvideo is a generated GoMock package.
package mockvideo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/myugen/go-ports-and-adapters/internal/shared/domain/valueobjects/uuid"
	video "github.com/myugen/go-ports-and-adapters/pkg/videos/domain/video"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(arg0 video.Video) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), arg0)
}

// NextID mocks base method.
func (m *MockRepository) NextID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// NextID indicates an expected call of NextID.
func (mr *MockRepositoryMockRecorder) NextID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextID", reflect.TypeOf((*MockRepository)(nil).NextID))
}
